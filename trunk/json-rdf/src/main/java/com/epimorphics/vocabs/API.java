/* CVS $Id: $ */
package com.epimorphics.vocabs; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from src/main/vocabs/api.ttl 
 * @author Auto-generated by schemagen on 14 Feb 2010 16:00 
 */
public class API {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.epimorphics.com/vocabularies/api#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>designates the (potentially) ordered set of results within this page of the 
     *  whole results set</p>
     */
    public static final ObjectProperty contains = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#contains" );
    
    /** <p>points to a viewer which should be used as the default view filter</p> */
    public static final ObjectProperty defaultViewer = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#defaultViewer" );
    
    /** <p>indicates a query endpoint provided by this API</p> */
    public static final ObjectProperty endpoint = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#endpoint" );
    
    /** <p>indicates a URL from which the content of this List/Set can be obtained</p> */
    public static final ObjectProperty listURL = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#listURL" );
    
    /** <p>indicates a URL from which the specification of this view can be obtained</p> */
    public static final ObjectProperty metaURL = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#metaURL" );
    
    /** <p>gives a selector from which selector should inherit</p> */
    public static final ObjectProperty parent = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#parent" );
    
    /** <p>points to a single prefix/namespace binding to use in embedded queries</p> */
    public static final ObjectProperty prefixMaping = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#prefixMaping" );
    
    /** <p>gives a property to include in the templated view</p> */
    public static final ObjectProperty properties = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#properties" );
    
    /** <p>points to the specification for which resources to include in the data view</p> */
    public static final ObjectProperty selector = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#selector" );
    
    /** <p>indicates the SPARQL endpoint to be used for an API</p> */
    public static final ObjectProperty sparqlEndpoint = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#sparqlEndpoint" );
    
    /** <p>indicates the class of the resources which make up this set/list</p> */
    public static final ObjectProperty type = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#type" );
    
    /** <p>points to a viewer defining the set of properties to include in the view (can 
     *  be given in a query using _viewer)</p>
     */
    public static final ObjectProperty viewer = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#viewer" );
    
    /** <p>reference to a vocabulary (aka ontology) resource which may contain annotations 
     *  to help with serialization and API access</p>
     */
    public static final ObjectProperty vocabulary = m_model.createObjectProperty( "http://www.epimorphics.com/vocabularies/api#vocabulary" );
    
    /** <p>gives a short name which can be used for any class or property</p> */
    public static final DatatypeProperty label = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#label" );
    
    /** <p>gives the namespace part of a prefix mapping, as a plain string</p> */
    public static final DatatypeProperty namespace = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#namespace" );
    
    /** <p>gives a default ordering for the list, can be a prop, prop chain optionally 
     *  followed by - to indicate descending (can be given in a query using _orderby=spec)</p>
     */
    public static final DatatypeProperty orderby = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#orderby" );
    
    /** <p>gives the number of the page within parent list</p> */
    public static final DatatypeProperty page = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#page" );
    
    /** <p>gives the number of items per page</p> */
    public static final DatatypeProperty pageSize = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#pageSize" );
    
    public static final DatatypeProperty paramVar = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#paramVar" );
    
    /** <p>gives the prefix part of a prefix mapping, as a plain string</p> */
    public static final DatatypeProperty prefix = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#prefix" );
    
    /** <p>gives a query filter in the same syntax as request queries, supported syntax 
     *  includes - property=value - prop1.prop2. ... propn=value - name-prop=value 
     *  (equivalent to prop.rdfs_label=value) - min-prop=value (matches greater than 
     *  or equal to value) - minO-prop=value (open min, matches greater than or value) 
     *  - max-prop=value (matches less than or equal to value) - maxO-prop=value (open 
     *  max, matches less than value)</p>
     */
    public static final DatatypeProperty query = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#query" );
    
    public static final DatatypeProperty resourceVar = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#resourceVar" );
    
    /** <p>gives the query that is run to find entries in this list</p> */
    public static final DatatypeProperty sparqlQuery = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#sparqlQuery" );
    
    /** <p>indicates the URI for the API endpoint, relative to the server base</p> */
    public static final DatatypeProperty uri = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#uri" );
    
    /** <p>indicates the URI or URI template for the API endpoint, relative to the server 
     *  base</p>
     */
    public static final DatatypeProperty uriTemplate = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#uriTemplate" );
    
    /** <p>gives a SPARQL WHERE clause (GroupGraphPattern excluding {}) to filter the 
     *  view (can be given in the query using _where)</p>
     */
    public static final DatatypeProperty where = m_model.createDatatypeProperty( "http://www.epimorphics.com/vocabularies/api#where" );
    
    /** <p>an API resource binds a set of related views to a SPARQL endpoint, also providing 
     *  cross-api settings</p>
     */
    public static final OntClass API = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#API" );
    
    /** <p>a viewer which provides a full DESCRIBE of each resource, where the semantics 
     *  of DESCRIBE is defined by the underlying sparqlEndpoint</p>
     */
    public static final OntClass DescribeViewer = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#DescribeViewer" );
    
    /** <p>a particular query endpoint within an API, represents a List or Set of resources 
     *  selected from the bound SPARQL endpoint</p>
     */
    public static final OntClass Endpoint = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Endpoint" );
    
    /** <p>class used to mark properties that should not be included in serialization</p> */
    public static final OntClass Hidden = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Hidden" );
    
    /** <p>an API Endpoint representing a single resource</p> */
    public static final OntClass ItemEndpoint = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#ItemEndpoint" );
    
    /** <p>an API Endpoint representing and ordered list of resources</p> */
    public static final OntClass ListEndpoint = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#ListEndpoint" );
    
    /** <p>class used to mark properties that should be serialized as if they are multivalued, 
     *  irrespective of their cardinality on any particular instance</p>
     */
    public static final OntClass Multivalued = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Multivalued" );
    
    /** <p>represents a page of results from a (possibly large) results document</p> */
    public static final OntClass Page = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Page" );
    
    /** <p>Represents a single prefix/namespace pair</p> */
    public static final OntClass PrefixMapping = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#PrefixMapping" );
    
    /** <p>A Selector specifies which resources match the query</p> */
    public static final OntClass Selector = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Selector" );
    
    /** <p>a viewer which uses a template, defined by a set of property (paths), to filter 
     *  the view</p>
     */
    public static final OntClass TemplateViewer = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#TemplateViewer" );
    
    /** <p>defines a (possibly named) subset of properties on list entries which should 
     *  be included in the returned model (named viewers can be invoked in a query 
     *  using _show)</p>
     */
    public static final OntClass Viewer = m_model.createClass( "http://www.epimorphics.com/vocabularies/api#Viewer" );
    
}
